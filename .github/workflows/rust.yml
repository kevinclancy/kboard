name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-musl

    - name: Install musl tools
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: install rsbuild
      run: cargo install rsbuild

    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Build frontend
      run: npm run build
      working-directory: ./frontend

    - name: Build backend
      env:
        RUSTFLAGS: "-C target-feature=+crt-static"
      run: cargo build --release --target x86_64-unknown-linux-musl

    - name: Run tests
      run: cargo test --verbose

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kboard:${{ env.IMAGE_TAG }} -f Dockerfile.prod .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kboard-nginx:${{ env.IMAGE_TAG }} -f nginx/Dockerfile.prod .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/kboard:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/kboard-nginx:${{ env.IMAGE_TAG }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        MAIL_APP_PWD: ${{ secrets.MAIL_APP_PWD }}
      run: |
        echo "$EC2_SSH_KEY" > private_key.pem
        chmod 600 private_key.pem

        scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.prod.yml $EC2_USERNAME@$EC2_HOST:~/

        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST << 'EOF'
          export DOCKER_REGISTRY=${{ secrets.DOCKERHUB_USERNAME }}
          export IMAGE_TAG=${{ github.sha }}
          export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          export MAIL_APP_PWD=${{ secrets.MAIL_APP_PWD }}

          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d
          docker system prune -af
        EOF

        rm private_key.pem