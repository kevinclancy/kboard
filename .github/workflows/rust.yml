name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Build frontend
      run: npm run build
      working-directory: ./frontend

    - name: Run tests
      run: cargo test --verbose

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kboard:${{ env.IMAGE_TAG }} -f Dockerfile .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kboard-nginx:${{ env.IMAGE_TAG }} -f nginx/Dockerfile .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/kboard:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/kboard-nginx:${{ env.IMAGE_TAG }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Copy docker-compose to EC2
      run: |
        aws s3 cp docker-compose.prod.yml s3://${{ secrets.DEPLOYMENT_BUCKET }}/docker-compose.prod.yml

    - name: Deploy to EC2 via SSM
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "set -e",
            "aws s3 cp s3://${{ secrets.DEPLOYMENT_BUCKET }}/docker-compose.prod.yml ~/docker-compose.prod.yml",
            "export DOCKER_REGISTRY=\"${{ secrets.DOCKERHUB_USERNAME }}\"",
            "export IMAGE_TAG=\"${{ github.sha }}\"",
            "export JWT_SECRET_KEY=\"${{ secrets.JWT_SECRET_KEY }}\"",
            "export MAIL_APP_PWD=\"${{ secrets.MAIL_APP_PWD }}\"",
            "docker compose -f ~/docker-compose.prod.yml pull",
            "docker compose -f ~/docker-compose.prod.yml up -d",
            "docker system prune -af"
          ]' \
          --query 'Command.CommandId' \
          --output text)

        echo "Waiting for deployment to complete..."
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }}

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Status' \
          --output text)

        if [ "$STATUS" != "Success" ]; then
          echo "Deployment failed with status: $STATUS"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'StandardErrorContent' \
            --output text
          exit 1
        fi

        echo "Deployment successful!"